//
//  {{ fileName }}.swift
//  {{ moduleName }}
//
//  Created by {{ author }} on {{ date }}.
//  Copyright Â© {{ year }} {{ organization }}. All rights reserved.
//

import Charts
import ComposableArchitecture
import SharedModels
import SharedResources
import SharingGRDB
import SwiftUI

public struct {{ className }}: View {
    let store: StoreOf<{{ featureName }}>

    public init(store: StoreOf<{{ featureName }}>) {
        self.store = store
    }

    public var body: some View {
        List {
            Section {
                VStack(spacing: 16) {
                    VStack(spacing: 8) {
                        HStack(spacing: 6) {
                            MediumGridCell(
                                color: .green,
                                count: store.state.stats.allCount,
                                iconName: "{{ iconName }}",
                                title: "All"
                            ) {
                                store.send(.detailButtonTapped(detailType: .all))
                            }

                            MediumGridCell(
                                color: .blue,
                                count: store.state.stats.activeCount,
                                iconName: "{{ iconName }}",
                                title: "Active"
                            ) {
                                store.send(.detailButtonTapped(detailType: .active))
                            }

                            MediumGridCell(
                                color: .gray,
                                count: store.state.stats.allCount - store.state.stats.activeCount,
                                iconName: "{{ iconName }}",
                                title: "Inactive"
                            ) {
                                store.send(.detailButtonTapped(detailType: .inactive))
                            }
                        }
                    }
                }
                .buttonStyle(.plain)
                .listRowBackground(Color.clear)
            } header: {
                Text("{{ entityName }} Status")
                    .font(.headline)
                    .foregroundStyle(.secondary)
                    .frame(maxWidth: .infinity, alignment: .leading)
                    .padding(.leading, 4)
            }
            
            Section {
                ForEach(store.state.filtered{{ entityName }}Records, id: \.{{ entityNameLower }}.id) { record in
                    {{ entityName }}Row({{ entityNameLower }}: record.{{ entityNameLower }})
                        .swipeActions(edge: .trailing) {
                            Button(role: .destructive) {
                                store.send(.deleteButtonTapped({{ entityNameLower }}: record.{{ entityNameLower }}))
                            } label: {
                                Label("Delete", systemImage: "trash")
                            }
                            .tint(.red)
                            Button {
                                store.send(.editButtonTapped({{ entityNameLower }}: record.{{ entityNameLower }}))
                            } label: {
                                Label("Edit", systemImage: "pencil")
                            }
                            .tint(.blue)
                            .disabled(record.{{ entityNameLower }}.name.isEmpty)
                        }
                }
            } header: {
                Text("My {{ entityName }}s")
                    .font(.headline)
                    .foregroundStyle(.secondary)
                    .frame(maxWidth: .infinity, alignment: .leading)
                    .padding(.leading, 4)
            }
        }
        .onAppear {
            store.send(.onAppear)
        }
        .searchable(text: .constant(""))
        .toolbar {
            ToolbarItem(placement: .bottomBar) {
                HStack {
                    Button {
                        store.send(.addButtonTapped)
                    } label: {
                        HStack {
                            Image(systemName: "plus.circle.fill")
                            Text("New {{ entityName }}")
                        }
                        .bold()
                        .font(.title3)
                    }
                }
            }
        }
        .sheet(
            store: store.scope(state: \.${{ entityNameLower }}Form, action: \.{{ entityNameLower }}Form)
        ) { {{ entityNameLower }}FormStore in
            NavigationStack {
                {{ entityName }}FormView(store: {{ entityNameLower }}FormStore)
                    .navigationTitle("{{ entityName }}")
            }
        }
    }
}

#Preview {
    let _ = prepareDependencies {
        $0.defaultDatabase = try! appDatabase()
    }
    NavigationStack {
        {{ className }}(store: Store(initialState: {{ featureName }}.State()) {
            {{ featureName }}()
        })
    }
}