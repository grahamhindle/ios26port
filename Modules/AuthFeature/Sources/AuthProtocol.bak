import Foundation
import SharedModels

/// Protocol defining authentication backend interface  
public protocol AuthProtocol: Sendable {
    // MARK: - Authentication

    func signIn() async throws -> (user: User, authRecord: AuthenticationRecord)
    func signUp() async throws -> (user: User, authRecord: AuthenticationRecord)
    func signInAsGuest() async throws -> (user: User, authRecord: AuthenticationRecord)
    func signOut() async throws

    // MARK: - User Management

    func getCurrentUser() async -> (user: User, authRecord: AuthenticationRecord)?
    func deleteAccount() async throws
    func resetPassword(email: String) async throws

    // MARK: - Database Operations

    func createUser(name: String, email: String) async throws -> User
    func updateUser(_ user: User) async throws -> User
    func getUserById(_ id: Int) async throws -> User?
    func deleteUser(_ id: Int) async throws

    // MARK: - State Management

    // func authStateChanges() -> AsyncStream<(user: User, authRecord: AuthenticationRecord)?>
    // func updateInMemoryUser(_ user: User, authRecord: AuthenticationRecord) async
}

// MARK: - Auth Errors

public enum AuthError: Error, LocalizedError, Equatable {
    case invalidCredentials
    case userNotFound
    case emailAlreadyExists
    case weakPassword
    case networkError
    case cancelled
    case unknown(String)

    public var errorDescription: String? {
        switch self {
        case .invalidCredentials:
            return "Invalid credentials"
        case .userNotFound:
            return "User not found"
        case .emailAlreadyExists:
            return "Email already exists"
        case .weakPassword:
            return "Password is too weak"
        case .networkError:
            return "Network error occurred"
        case .cancelled:
            return "Authentication cancelled"
        case let .unknown(message):
            return message
        }
    }

    public static func from(_ error: Error) -> AuthError {
        if let authError = error as? AuthError {
            return authError
        }
        return .unknown(error.localizedDescription)
    }
}
